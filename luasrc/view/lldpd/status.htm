<%#
 Copyright (c) 2018, Tano Systems. All Rights Reserved.
 Anton Kikin <a.kikin@tano-systems.com>
-%>

<%+header%>

<style type="text/css">
	table.lldpd-kvtable { border: 0 }

	table.lldpd-kvtable td {
		padding: 2px 6px 2px 0px; background-color: inherit !important; line-height: 16px;
		border: 0;
	}

	table.lldpd-kvtable tr {
		background-color: inherit !important;
	}

	table.lldpd-kvtable td:first-of-type {
		vertical-align: top; font-weight: bold; white-space: nowrap;
		text-align: right;
	}

	table.lldpd-kvtable td:last-of-type { width: 100%; }

	.lldpd-cell-hidden {
		overflow: hidden;
		height: 0;
	}

	.lldpd-cell-visible {
		overflow: visible;
		height: auto;
	}

	.lldpd-table .tr .td { cursor: pointer; }

	.lldpd-protocol-badge {
		display: inline-block;
		width: auto !important;
		width: fit-content !important;
		width: -moz-fit-content !important;
		width: -webkit-fit-content !important;
		padding: 3px 8px;
		border-radius: 3px;
		width: 100%;
		background-color: #e6e6e6;
		border: solid 1px #b9b9b9;
		color: #595959;
	}

	.lldpd-protocol-badge.lldpd-protocol-lldp  { background-color: #b7efcf; border-color: #2abd69; color: #165e34; }
	.lldpd-protocol-badge.lldpd-protocol-cdp   { background-color: #b2daf3; border-color: #46a6e2; color: #1a74ac; }
	.lldpd-protocol-badge.lldpd-protocol-fdp   { background-color: #f9e3b3; border-color: #b7820f; color: #b7820f; }
	.lldpd-protocol-badge.lldpd-protocol-edp   { background-color: #f9e3f9; border-color: #e380e3; color: #b70f82; }
	.lldpd-protocol-badge.lldpd-protocol-sonmp { background-color: #f4ffc4; border-color: #a7ce00; color: #7e9b00; }

</style>

<h2 name="content"><%:LLDPd Status%></h2>
<div class="cbi-map-descr"><%:This page allows you to see discovered LLDP neighbors, local interfaces statistics and local chassis information.%></div>

<div class="alert-message error" id="lldpd-error" style="display: none"></div>

<div class="cbi-section-node cbi-section-node-tabbed" data-tab-group="0">

<div class="cbi-tabcontainer" id="container.neighbors"
	data-tab="neighbors"
	data-tab-title="<%:Neighbors table%>"
	data-tab-active="true">
	<h3 name="content"><%:Discovered neighbors table%> (<span id="lldpd-neighbors-count">0</span>)</h3>
	<div class="table-wrapper"><div class="table lldpd-table" id="lldpd-neighbors">
		<div class="tr table-titles">
			<div class="th left top"><%:Local interface%></div>
			<div class="th left top"><%:Protocol%></div>
			<div class="th left top"><%:Discovered chassis%></div>
			<div class="th left top"><%:Discovered port%></div>
		</div>
		<div class="tr center placeholder">
			<div class="td">
				<em class="spinning"><%:Collecting data...%></em>
			</div>
		</div>
	</div></div>
</div>

<div class="cbi-tabcontainer" id="container.statistics"
	data-tab="statistics"
	data-tab-title="<%:Statistics table%>"
	data-tab-active="false">
	<h3 name="content"><%:Local interfaces statistics table%></h3>
	<div class="table-wrapper"><div class="table lldpd-table" id="lldpd-statistics">
		<div class="tr table-titles">
			<div class="th left top"><%:Local interface%></div>
			<div class="th left top"><%:Protocol%></div>
			<div class="th left top"><%:Tx%></div>
			<div class="th left top"><%:Rx%></div>
			<div class="th left top"><%:Rx discarded%></div>
			<div class="th left top"><%:Rx unrecognized%></div>
			<div class="th left top"><%:Ageout count%></div>
			<div class="th left top"><%:Insert count%></div>
			<div class="th left top"><%:Delete count%></div>
		</div>
		<div class="tr center placeholder">
			<div class="td">
				<em class="spinning"><%:Collecting data...%></em>
			</div>
		</div>
	</div></div>
</div>

<div class="cbi-tabcontainer" id="container.chassis"
	data-tab="chassis"
	data-tab-title="<%:Local chassis%>"
	data-tab-active="false">
	<h3 name="content"><%:Local chassis information%></h3>
	<div id="lldpd-chassis"><em class="spinning"><%:Collecting data...%></em></div>
</div>

</div>


<script type="text/javascript">//<![CDATA[

	function lldpd_error(msg) {
		var d = document.getElementById('lldpd-error');
		d.innerHTML = msg;

		if (!msg || (msg == ''))
		{
			d.innerHTML = '';
			d.style.display = "none";
		}
		else
		{
			d.innerHTML = msg;
			d.style.display = "block";
		}
	}

	function lldpd_error_hide() {
		lldpd_error(null);
	}

	function lldpd_neighbors_add_row(i, obj)
	{
		var row = [];
		var cells_folded = [];
		var cells_unfolded = [];

		if (typeof obj === 'undefined')
			obj.name = 'Unknown';

		var new_id = obj.name + '-' + obj.rid;

		if (typeof obj.port !== 'undefined')
		{
			if (typeof obj.port[0].id !== 'undefined')
				new_id += "-" + obj.port[0].id[0].value;

			if (typeof obj.port[0].descr !== 'undefined')
				new_id += "-" + obj.port[0].descr[0].value;
		}

		var id = lldpd_id(new_id);

		//
		// Interface
		//
		cells_folded[0] = '%s'.format(obj.name);

		cells_unfolded[0] = '<table class="lldpd-kvtable">';
		cells_unfolded[0] += lldpd_kvtable_add_row("<%:Name%>", obj.name);
		cells_unfolded[0] += lldpd_kvtable_add_row("<%:Age%>", lldpd_fmt_age(obj.age));
		cells_unfolded[0] += "</table>";

		//
		// Protocol
		//
		cells_folded[1] = lldpd_fmt_protocol(obj.via);
		cells_unfolded[1] = null;

		//
		// Chassis
		//
		var ch = obj.chassis[0];

		cells_folded[2]   = lldpd_fmt_chassis(ch);
		cells_unfolded[2] = lldpd_fmt_chassis_kvtable(ch);

		//
		// Port
		//
		cells_folded[3]   = lldpd_fmt_port(obj);
		cells_unfolded[3] = lldpd_fmt_port_kvtable(obj, true);

		row.push(id);
		return row.concat(lldpd_folding_row(id, cells_folded, cells_unfolded, true));
	}

	function lldpd_neighbors_update(data)
	{
		var error = 0;
		var i = 0;

		var nb_table =
			document.getElementById('lldpd-neighbors');

		var nb_count =
			document.getElementById('lldpd-neighbors-count');

		var rows = [];

		if (data &&
		    typeof data.neighbors !== 'undefined' &&
		    typeof data.neighbors.lldp !== 'undefined')
		{
			var ifaces = data.neighbors.lldp[0].interface;

			// Fill table rows
			if (typeof ifaces !== 'undefined') {
				for (i = 0; i < ifaces.length; i++)
					rows.push(lldpd_neighbors_add_row(i, ifaces[i]));
			}
		} else {
			if (!data)
				error = 1;
		}

		lldpd_update_table(nb_table, rows,
			'<em><%:No information available%></em>');

		nb_count.innerHTML = i;
		return error;
	}

	function lldpd_statistics_add_row(i, sobj, iobj)
	{
		var row = [];
		var cells_folded   = [];
		var cells_unfolded = [];

		var id = lldpd_id(iobj.name);

		cells_folded[0]   = lldpd_fmt_port(iobj);
		cells_unfolded[0] = lldpd_fmt_port_kvtable(iobj, false);

		cells_folded[1]   = lldpd_fmt_protocol(iobj.via);
		cells_unfolded[1] = null;

		cells_folded[2] = lldpd_fmt_number(sobj.tx[0].tx);
		cells_folded[3] = lldpd_fmt_number(sobj.rx[0].rx);
		cells_folded[4] = lldpd_fmt_number(sobj.rx_discarded_cnt[0].rx_discarded_cnt);
		cells_folded[5] = lldpd_fmt_number(sobj.rx_unrecognized_cnt[0].rx_unrecognized_cnt);
		cells_folded[6] = lldpd_fmt_number(sobj.ageout_cnt[0].ageout_cnt);
		cells_folded[7] = lldpd_fmt_number(sobj.insert_cnt[0].insert_cnt);
		cells_folded[8] = lldpd_fmt_number(sobj.delete_cnt[0].delete_cnt);

		cells_unfolded[2] = null;
		cells_unfolded[3] = null;
		cells_unfolded[4] = null;
		cells_unfolded[5] = null;
		cells_unfolded[6] = null;
		cells_unfolded[7] = null;
		cells_unfolded[8] = null ;

		row.push(id);
		return row.concat(lldpd_folding_row(id, cells_folded, cells_unfolded, true));
	}

	function lldpd_statistics_update(data)
	{
		var error = 0;
		var statistics_table =
			document.getElementById('lldpd-statistics');

		var rows = [];

		if (data &&
		    typeof data.statistics !== 'undefined' &&
		    typeof data.interfaces !== 'undefined' &&
		    typeof data.statistics.lldp !== 'undefined' &&
		    typeof data.interfaces.lldp !== 'undefined')
		{
			var sifaces = data.statistics.lldp[0].interface;
			var ifaces  = data.interfaces.lldp[0].interface;

			if ((typeof sifaces !== 'undefined') &&
			    (typeof  ifaces !== 'undefined')) {
				for (var i = 0; i < sifaces.length; i++)
					rows.push(lldpd_statistics_add_row(i, sifaces[i], ifaces[i]));
			}
		} else {
			if (!data)
				error = 1;
		}

		lldpd_update_table(statistics_table, rows,
			'<em><%:No information available%></em>');

		return error
	}

	function lldpd_chassis_update(data)
	{
		var error = 0;
		var chassis_table =
			document.getElementById('lldpd-chassis');

		if (data &&
		    typeof data.chassis !== 'undefined' &&
		    typeof data.chassis['local-chassis'] !== 'undefined' &&
		    typeof data.chassis['local-chassis'][0].chassis[0].name !== 'undefined')
		{
			chassis_table.innerHTML = lldpd_fmt_chassis_kvtable(
				data.chassis['local-chassis'][0].chassis[0]);
		}
		else
		{
			if (!data)
				error = 1;

			chassis_table.innerHTML = '<em><%:No information available%></em>';
		}

		return error;
	}

	L.Poll.add(function() {
		return L.Request.get(L.url('admin/services/lldpd/get_info'), null, {
			timeout: 0
		}).then(function(r) {
			var error = 0;
			var json = null;

			try {
				json = JSON.parse(r.responseText);
			} catch(e) {}

			error += lldpd_neighbors_update(json);
			error += lldpd_statistics_update(json);
			error += lldpd_chassis_update(json);

			if (error > 0)
				lldpd_error('<%:Failed to read information. Maybe LLDPd service is not running or restarting.%>');
			else
				lldpd_error_hide();
		});
	})
//]]></script>
<script type="text/javascript" src="<%=resource%>/lldpd/lldpd.js?v=076ba6e70ec36de93fe00e85943e3767"></script>

<%
	local uci = require("luci.model.uci").cursor()
	local hide_footer = uci:get_bool("luci", "app_tn_lldpd", "hide_footer") or false
	if hide_footer == false then
%>
	<%+lldpd/footer%>
<%	end %>

<%+footer%>
